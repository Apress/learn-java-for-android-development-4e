// ----- UNNUMBERED LISTING ------------------------------
buf.mark().position(2).reset();



// ----- UNNUMBERED LISTING ------------------------------
javac BufferDemo.java



// ----- UNNUMBERED LISTING ------------------------------
java BufferDemo



// ----- UNNUMBERED LISTING ------------------------------
javac ChannelDemo.java



// ----- UNNUMBERED LISTING ------------------------------
Selector selector = Selector.open();



// ----- UNNUMBERED LISTING ------------------------------
javac SelectorServer.java



// ----- UNNUMBERED LISTING ------------------------------
java SelectorServer



// ----- UNNUMBERED LISTING ------------------------------
javac SelectorClient.java



// ----- UNNUMBERED LISTING ------------------------------
java SelectorClient



// ----- UNNUMBERED LISTING ------------------------------
javac RegExDemo.java



// ----- UNNUMBERED LISTING ------------------------------
java RegExDemo ox ox



// ----- UNNUMBERED LISTING ------------------------------
java RegExDemo box ox



// ----- UNNUMBERED LISTING ------------------------------
java RegExDemo \wbc abc



// ----- UNNUMBERED LISTING ------------------------------
java RegExDemo "(Android) \1" "Android Android"



// ----- UNNUMBERED LISTING ------------------------------
java RegExDemo \b\b "I think"



// ----- UNNUMBERED LISTING ------------------------------
java RegExDemo .*end "wend rend end"



// ----- UNNUMBERED LISTING ------------------------------
java RegExDemo .*?end "wend rend end"



// ----- UNNUMBERED LISTING ------------------------------
java RegExDemo .*+end "wend rend end"



// ----- UNNUMBERED LISTING ------------------------------
java RegExDemo 1? 101101



// ----- UNNUMBERED LISTING ------------------------------
java RegExDemo 1?? 101101



// ----- UNNUMBERED LISTING ------------------------------
java RegExDemo 1+? 101101



// ----- UNNUMBERED LISTING ------------------------------
javac CharsetDemo.java



// ----- UNNUMBERED LISTING ------------------------------
java CharsetDemo



// ----- UNNUMBERED LISTING ------------------------------
javac FormatterDemo.java



// ----- UNNUMBERED LISTING ------------------------------
java FormatterDemo



// ----- UNNUMBERED LISTING ------------------------------
buf.mark();
buf.position(2);
buf.reset();



// ----- UNNUMBERED LISTING ------------------------------
import java.nio.Buffer;
import java.nio.ByteBuffer;

public class BufferDemo {
   public static void main(String[] args) {
      Buffer buffer = ByteBuffer.allocate(7);
      System.out.println("Capacity: " + buffer.capacity());
      System.out.println("Limit: " + buffer.limit());
      System.out.println("Position: " + buffer.position());
      System.out.println("Remaining: " + buffer.remaining());
      System.out.println("Changing buffer limit to 5");
      buffer.limit(5);
      System.out.println("Limit: " + buffer.limit());
      System.out.println("Position: " + buffer.position());
      System.out.println("Remaining: " + buffer.remaining());
      System.out.println("Changing buffer position to 3");
      buffer.position(3);
      System.out.println("Position: " + buffer.position());
      System.out.println("Remaining: " + buffer.remaining());
      System.out.println(buffer);
   }
}



// ----- UNNUMBERED LISTING ------------------------------
import java.io.IOException;

import java.nio.ByteBuffer;

import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.WritableByteChannel;

public class ChannelDemo {
   public static void main(String[] args) {
      ReadableByteChannel src = Channels.newChannel(System.in);
      WritableByteChannel dest = Channels.newChannel(System.out);

      try {
         copy(src, dest); // or copyAlt(src, dest);
      } catch (IOException ioe) {
         System.err.println("I/O error: " + ioe.getMessage());
      } finally {
         try {
            src.close();
            dest.close();
         } catch (IOException ioe) {
         }
      }
   }

   private static void copy(ReadableByteChannel src, WritableByteChannel dest)
      throws IOException
   {
      ByteBuffer buffer = ByteBuffer.allocateDirect(2048);
      while (src.read(buffer) != -1) {
         buffer.flip();
         dest.write(buffer);
         buffer.compact();
      }
      buffer.flip();
      while (buffer.hasRemaining())
           dest.write(buffer);
   }

   private static void copyAlt(ReadableByteChannel src, WritableByteChannel dest)
      throws IOException
   {
      ByteBuffer buffer = ByteBuffer.allocateDirect(2048);
      while (src.read(buffer) != -1) {
         buffer.flip();
         while (buffer.hasRemaining())
            dest.write(buffer);
         buffer.clear();
      }
   }
}



// ----- UNNUMBERED LISTING ------------------------------
java ChannelDemo
java ChannelDemo <ChannelDemo.java >ChannelDemo.bak



// ----- UNNUMBERED LISTING ------------------------------
channel.configureBlocking(false);
SelectionKey key = channel.register(selector, SelectionKey.OP_ACCEPT |
                                              SelectionKey.OP_READ |
                                             SelectionKey.OP_WRITE);



// ----- UNNUMBERED LISTING ------------------------------
while (true) {
   int numReadyChannels = selector.select();
   if (numReadyChannels == 0)
     continue; // there are no ready channels to process

   Set<SelectionKey> selectedKeys = selector.selectedKeys();
   Iterator<SelectionKey> keyIterator = selectedKeys.iterator();

     while (keyIterator.hasNext()) {
      SelectionKey key = keyIterator.next();

        if (key.isAcceptable()) {
         // A connection was accepted by a ServerSocketChannel.
         ServerSocketChannel server = (ServerSocketChannel) key.channel();
         SocketChannel client = server.accept();
         if (client == null) // in case accept() returns null
            continue;
         client.configureBlocking(false); // must be nonblocking
         // Register socket channel with selector for read operations.
        client.register(selector, SelectionKey.OP_READ);
        } else if (key.isReadable()) {
         // A socket channel is ready for reading.
         SocketChannel client = (SocketChannel) key.channel();
         // Perform work on the socket channel.
        } else if (key.isWritable()) {
         // A socket channel is ready for writing.
         SocketChannel client = (SocketChannel) key.channel();
         // Perform work on the socket channel.
      }

      keyIterator.remove();
   }
}



// ----- UNNUMBERED LISTING ------------------------------
import java.io.IOException;

import java.net.InetSocketAddress;
import java.net.ServerSocket;

import java.nio.ByteBuffer;

import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

import java.util.Iterator;

public class SelectorServer {
   private final static int DEFAULT_PORT = 9999;

   private static ByteBuffer bb = ByteBuffer.allocateDirect(8);

   public static void main(String[] args) throws IOException {
      int port = DEFAULT_PORT;
          if (args.length > 0)
         port = Integer.parseInt(args[0]);
      System.out.println("Server starting ... listening on port " + port);
      
      ServerSocketChannel ssc = ServerSocketChannel.open();
      ServerSocket ss = ssc.socket();
      ss.bind(new InetSocketAddress(port));
      ssc.configureBlocking(false);

      Selector s = Selector.open();
      ssc.register(s, SelectionKey.OP_ACCEPT);

      while (true) {
         int n = s.select();
         if (n == 0)
            continue;
         Iterator it = s.selectedKeys().iterator();
         while (it.hasNext()) {
            SelectionKey key = (SelectionKey) it.next();
            if (key.isAcceptable()) {
               SocketChannel sc = ((ServerSocketChannel) key.channel()).accept();
               if (sc == null)
                  continue;
               System.out.println("Receiving connection");
               bb.clear();
              bb.putLong(System.currentTimeMillis());
               bb.flip();
               System.out.println("Writing current time");
               while (bb.hasRemaining())
                  sc.write(bb);
               sc.close();
            }
            it.remove();
         }
      }
   }
}



// ----- UNNUMBERED LISTING ------------------------------
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.Date;

public class SelectorClient {
   private final static int DEFAULT_PORT = 9999;

   private static ByteBuffer bb = ByteBuffer.allocateDirect(8);

   public static void main(String[] args) {
      int port = DEFAULT_PORT;
          if (args.length > 0)
         port = Integer.parseInt(args[0]);

      try {
         SocketChannel sc = SocketChannel.open();
         InetSocketAddress addr = new InetSocketAddress("localhost", port);
         sc.connect(addr);

         long time = 0;
         while (sc.read(bb) != -1) {
            bb.flip();
            while (bb.hasRemaining()){
               time <<= 8;
               time |= bb.get() & 255;
            }
            bb.clear();
         }
         System.out.println(new Date(time));

         sc.close();
      } catch (IOException ioe) {
         System.err.println("I/O error: " + ioe.getMessage());
      }
   }
}



// ----- UNNUMBERED LISTING ------------------------------
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

public class RegExDemo {
  public static void main(String[] args) {
     if (args.length != 2) {
         System.err.println("usage: java RegExDemo regex input");
         return;
     }
     try {
         System.out.println("regex = " + args[0]);
         System.out.println("input = " + args[1]);
         Pattern p = Pattern.compile(args[0]);
         Matcher m = p.matcher(args[1]);
         while (m.find())
            System.out.println("Located [" + m.group() + "] starting at "
                               + m.start() + " and ending at " + (m.end() - 1));
     } catch (PatternSyntaxException pse) {
         System.err.println("Bad regex: " + pse.getMessage());
         System.err.println("Description: " + pse.getDescription());
         System.err.println("Index: " + pse.getIndex());
         System.err.println("Incorrect pattern: " + pse.getPattern());
     }
  }
}



// ----- UNNUMBERED LISTING ------------------------------
java RegExDemo "(\(\d{3}\))?\s*\d{3}-\d{4}" "(800) 555-1212"
regex = (\(\d{3}\))?\s*\d{3}-\d{4}
input = (800) 555-1212
Located [(800) 555-1212] starting at 0 and ending at 13

java RegExDemo "(\(\d{3}\))?\s*\d{3}-\d{4}" 555-1212
regex = (\(\d{3}\))?\s*\d{3}-\d{4}
input = 555-1212
Located [555-1212] starting at 0 and ending at 7



// ----- UNNUMBERED LISTING ------------------------------
import java.nio.ByteBuffer;
import java.nio.charset.Charset;

public class CharsetDemo {
   public static void main(String[] args) {
      String msg = "façade touché";
      String[] csNames = {
         "US-ASCII",
         "ISO-8859-1",
         "UTF-8",
         "UTF-16BE",
         "UTF-16LE",
         "UTF-16"
      };

      encode(msg, Charset.defaultCharset());
      for (String csName: csNames)
         encode(msg, Charset.forName(csName));
   }

   private static void encode(String msg, Charset cs) {
      System.out.println("Charset: " + cs.toString());
      System.out.println("Message: " + msg);

      ByteBuffer buffer = cs.encode(msg);
      System.out.println("Encoded: ");

      for (int i = 0; buffer.hasRemaining(); i++) {
         int _byte = buffer.get() & 255;
         char ch = (char) _byte;
         if (Character.isWhitespace(ch) || Character.isISOControl(ch))
            ch = '\u0000';
         System.out.printf("%2d: %02x (%c)%n", i, _byte, ch);
      }
      System.out.println();
   }
}



// ----- UNNUMBERED LISTING ------------------------------
import java.io.UnsupportedEncodingException;

public class CharsetDemo {
   public static void main(String[] args) throws UnsupportedEncodingException {
      byte[] encodedMsg = {
         0x66, 0x61, (byte) 0xc3, (byte) 0xa7, 0x61, 0x64, 0x65, 0x20, 0x74,
         0x6f, 0x75, 0x63, 0x68, (byte) 0xc3, (byte) 0xa9
      };
      String s = new String(encodedMsg, "UTF-8");
      System.out.println(s);
      System.out.println();
      byte[] bytes = s.getBytes();
      for (byte _byte: bytes)
        System.out.print(Integer.toHexString(_byte & 255) + " ");
      System.out.println();
   }
}



// ----- UNNUMBERED LISTING ------------------------------
import java.util.Formatter;

public class FormatterDemo {
  public static void main(String[] args) {
     Formatter formatter = new Formatter();
     formatter.format("%d", 123);
     System.out.println(formatter.toString());
     formatter.format("%x", 123);
     System.out.println(formatter.toString());
     formatter.format("%c", 'X');
     System.out.println(formatter.toString());
     formatter.format("%f", 0.1);
     System.out.println(formatter.toString());
     formatter.format("%s%n", "Hello, World");
     System.out.println(formatter.toString());
     formatter.format("%10.2f", 98.375);
     System.out.println(formatter.toString());
     formatter.format("%05d", 123);
     System.out.println(formatter.toString());
     formatter.format("%1$d %1$d", 123);
     System.out.println(formatter.toString());
     formatter.format("%d %d", 123);
     System.out.println(formatter.toString());
     formatter.close();
  }
}



// ----- UNNUMBERED LISTING ------------------------------
   public static void main(String[] args) {
      System.out.printf("%04X%n", 478);
      System.out.printf("Current date: %1$tb %1$te, %1$tY%n",
                       System.currentTimeMillis());
   }
}



// ----- UNNUMBERED LISTING ------------------------------
Scanner sc = new Scanner(System.in);
if (sc.hasNextInt())
  i = sc.nextInt();
if (sc.hasNextDouble())
  d = sc.nextDouble();



