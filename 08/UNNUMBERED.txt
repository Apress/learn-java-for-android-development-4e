// ----- UNNUMBERED LISTING ------------------------------
9 0 5 6 2 3 8 4 1 7



// ----- UNNUMBERED LISTING ------------------------------
java PackageInfo logging



// ----- UNNUMBERED LISTING ------------------------------
logging not found



// ----- UNNUMBERED LISTING ------------------------------
jar cfm logging.jar manifest.mf logging



// ----- UNNUMBERED LISTING ------------------------------
java -cp logging.jar;. PackageInfo logging 1.0 logging.File



// ----- UNNUMBERED LISTING ------------------------------
java ArrayDemo a b c



// ----- UNNUMBERED LISTING ------------------------------
String[] values = "this is a test".split("\\s");



// ----- UNNUMBERED LISTING ------------------------------
    public static double random() { return RandomNumberGeneratorHolder.randomNumberGenerator.nextDouble();
}
... // class Math
private statc final class RandomNumberGeneratorHolder {
   static final Random randomNumberGenerator = new Random();
}




// ----- UNNUMBERED LISTING ------------------------------
import java.util.Random;

public class Shuffle {
   public static void main(String[] args) {
     Random r = new Random();
     int[] array = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
      for (int i = 0; i < array.length; i++) {
        int n = r.nextInt(array.length);
        // swap array[i] with array[n]
        int temp = array[i];
        array[i] = array[n];
        array[n] = temp;
      }
      for (int i = 0; i < array.length; i++)
        System.out.print(array[i] + " ");
      System.out.println();
   }
}



// ----- UNNUMBERED LISTING ------------------------------
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

public class Investigator {
   public static void main(String[] args) {
      if (args.length != 1) {
        System.err.println("usage: java Investigator classname");
        return;
      }
      Try {
        investigateClass(Class.forName(args[0]), 0);
      } catch (ClassNotFoundException cnfe) {
        System.err.println("could not locate " + args[0]);
      }
   }

   public static void investigateClass(Class<?> clazz, int indentLevel) {
     indent(indentLevel * 3);
     System.out.print(Modifier.toString(clazz.getModifiers()) + " ");
      if (clazz.isEnum())
        System.out.println("enum " + clazz.getName());
     else if (clazz.isInterface()) {
         if (clazz.isAnnotation())
           System.out.print("@");
        System.out.println(clazz.getName());
      } else
        System.out.println(clazz);
     indent(indentLevel * 3);
     System.out.println("{");
     Field[] fields = clazz.getDeclaredFields();
      for (int i = 0; i < fields.length; i++) {
        indent(indentLevel * 3);
           System.out.println(" " + fields[i]);
      }
     Constructor[] constructors = clazz.getDeclaredConstructors();
      if (constructors.length != 0 && fields.length != 0)
        System.out.println();
      for (int i = 0; i < constructors.length; i++) {
        indent(indentLevel * 3);
          System.out.println(" "+constructors[i]);
      }
     Method[] methods = clazz.getDeclaredMethods();
      if (methods.length != 0 &&
         (fields.length != 0 || constructors.length != 0))
        System.out.println();
      for (int i = 0; i < methods.length; i++) {
        indent(indentLevel * 3);
          System.out.println(" "+methods[i]);
      }
     Method[] methodsAll = clazz.getMethods();
      if (methodsAll.length != 0 &&
         (fields.length != 0 || constructors.length != 0 ||
          methods.length != 0))
        System.out.println();
      if (methodsAll.length != 0) {
        indent(indentLevel * 3);
           System.out.println(" ALL PUBLIC METHODS");
        System.out.println();
      }
      for (int i = 0; i < methodsAll.length; i++){
        indent(indentLevel * 3);
          System.out.println(" "+methodsAll[i]);
      }
     Class<?>[] members = clazz.getDeclaredClasses();
      if (members.length != 0 && (fields.length != 0 ||
         constructors.length != 0 || methods.length != 0 ||
         methodsAll.length != 0))
        System.out.println();
      for (int i = 0; i < members.length; i++)
         if (clazz != members[i]) {
           investigateClass(members[i], indentLevel + 1);
           if (i != members.length - 1)
              System.out.println();
        }
     indent(indentLevel * 3);
     System.out.println("}");
   }

   static void indent(int numSpaces) {
      for (int i = 0; i < numSpaces; i++)
         System.out.print(' ');
   }
}



// ----- UNNUMBERED LISTING ------------------------------
try {
  Class<?> clazz = Class.forName("codecs.AVI");
  Codec codec = (Codec) clazz.newInstance();
  VideoPlayer player = new VideoPlayer(codec);
  player.play("movie.avi");
} catch( ClassNotFoundException
     | IllegalAccessException
     | InstantiationException e) {
  e.printStackTrace(System.err);
}




// ----- UNNUMBERED LISTING ------------------------------
import java.lang.reflect.Field;

class X {
   public int i = 10;
   public static final double PI = 3.14;
}

public class FieldAccessDemo {
   public static void main(String[] args) {
      try {
        Class<?> clazz = Class.forName("X");
        X x = (X) clazz.newInstance();
        Field f = clazz.getField("i");
        System.out.println(f.getInt(x)); // Output: 10
        f.setInt(x, 20);
        System.out.println(f.getInt(x)); // Output: 20
         f = clazz.getField("PI");
        System.out.println(f.getDouble(null)); // Output: 3.14
        f.setDouble(x, 20);
        System.out.println(f.getDouble(null)); // Never executed
      } catch (Exception e) {
        System.err.println(e);
      }
   }
}



// ----- UNNUMBERED LISTING ------------------------------
import java.lang.reflect.Method;

class X {
   public void objectMethod(String arg) {
     System.out.println("Instance method: " + arg);
   }

   public static void classMethod() {
     System.out.println("Class method");
   }
}

public class MethodInvocationDemo {
   public static void main(String[] args) {
      try {
        Class<?> clazz = Class.forName("X");
        X x = (X) clazz.newInstance();
        Class[] argTypes = { String.class };
        Method method = clazz.getMethod("objectMethod", argTypes);
        Object[] data = { "Hello" };
        method.invoke(x, data); // Output: Instance method: Hello
        method = clazz.getMethod("classMethod", (Class<?>[]) null);
        method.invoke(null, (Object[]) null); // Output: Class method
      } catch (Exception e) {
        System.err.println(e);
      }
   }
}



// ----- UNNUMBERED LISTING ------------------------------
public class PackageInfo {
  public static void main(String[] args) {
     if (args.length == 0) {
         System.err.println("usage: java PackageInfo packageName [version]");
         return;
     }
     Package pkg = Package.getPackage(args[0]);
     if (pkg == null) {
         System.err.println(args[0] + " not found");
         return;
     }
     System.out.println("Name: " + pkg.getName());
     System.out.println("Implementation title: " +
                        pkg.getImplementationTitle());
     System.out.println("Implementation vendor: " +
                        pkg.getImplementationVendor());
     System.out.println("Implementation version: " +
                        pkg.getImplementationVersion());
     System.out.println("Specification title: " +
                        pkg.getSpecificationTitle());
     System.out.println("Specification vendor: " +
                        pkg.getSpecificationVendor());
     System.out.println("Specification version: " +
                        pkg.getSpecificationVersion());
     System.out.println("Sealed: " + pkg.isSealed());
     if (args.length > 1)
         System.out.println("Compatible with " + args[1] + ": " +
                           pkg.isCompatibleWith(args[1]));
  }
}



// ----- UNNUMBERED LISTING ------------------------------
if (args.length == 3) try {
  Class.forName(args[2]);
} catch (ClassNotFoundException cnfe) {
  System.err.println("cannot load " + args[2]);
  return;
}



// ----- UNNUMBERED LISTING ------------------------------
Name: logging
Implementation title: null
Implementation vendor: null
Implementation version: null
Specification title: null
Specification vendor: null
Specification version: null
Sealed: false
Exception in thread "main" java.lang.NumberFormatException: Empty version string
at java.lang.Package.isCompatibleWith(Unknown Source)
at PackageInfo.main(PackageInfo.java:41)



// ----- UNNUMBERED LISTING ------------------------------
Implementation-Title: Logging Implementation
Implementation-Vendor: Jeff Friesen
Implementation-Version: 1.0a
Specification-Title: Logging Specification
Specification-Vendor: Jeff "JavaJeff" Friesen
Specification-Version: 1.0
Sealed: true



// ----- UNNUMBERED LISTING ------------------------------
jar cfm logging.jar manifest.mf logging\*.class
jar cfm logging.jar manifest.mf logging/*.class



// ----- UNNUMBERED LISTING ------------------------------
Name: logging
Implementation title: Logging Implementation
Implementation vendor: Jeff Friesen (IV)
Implementation version: 1.0a
Specification title: Logging Specification
Specification vendor: Jeff Friesen (SV)
Specification version: 1.0
Sealed: true
Compatible with 1.0: true



// ----- UNNUMBERED LISTING ------------------------------
import java.lang.reflect.Array;

public class ArrayDemo {
   public static void main(String[] args) {
                 String[] argsCopy = (String[]) Array.newInstance( String.class, args.length);
      for (int i = 0; i < args.length; i++)
        Array.set(argsCopy, i, args[i]);
      for (int i = 0; i < args.length; i++)
        System.out.println(Array.get(argsCopy, i));
   }
}



// ----- UNNUMBERED LISTING ------------------------------
a
b
c



// ----- UNNUMBERED LISTING ------------------------------
StringTokenizer st = new StringTokenizer("this is a test");
while (st.hasMoreTokens())
  System.out.println(st.nextToken());



// ----- UNNUMBERED LISTING ------------------------------
this
is
a
test



// ----- UNNUMBERED LISTING ------------------------------
StringTokenizer st = new StringTokenizer("this is a test");
Enumeration<String> e = (Enumeration) st;
while (e.hasMoreElements())
  System.out.println(e.nextElement());



// ----- UNNUMBERED LISTING ------------------------------
for (int i = 0; i < values.length; i++)
  System.out.println(values[i]);
you would observe the same output as for the StringTokenizer code above.



// ----- UNNUMBERED LISTING ------------------------------
import java.util.Timer;
import java.util.TimerTask;

public class TimerDemo {
  public static void main(String[] args) {
     TimerTask task = new TimerTask(){
                  @Override
                  public void run() {
                    System.out.println(System.currentTimeMillis());
                  }
               };
     Timer timer = new Timer();
     timer.schedule(task, 0, 1000);
  }
}



// ----- UNNUMBERED LISTING ------------------------------
1380933893664
1380933894666
1380933895668
1380933896668
1380933897670
1380933898672

For more details about Timer and TimerTask please consult the API documentation. There we learn how to schedule one-shot executions, and executions with fixed delay or at fixed rate, and how to cancel times.



