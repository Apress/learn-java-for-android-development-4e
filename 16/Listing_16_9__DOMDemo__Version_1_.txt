import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


public class DOMDemo {
  public static void main(String[] args) {
     if (args.length != 1) {
         System.err.println("usage: java DOMDemo xmlfile");
         return;
     }
     try {
         DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
         dbf.setNamespaceAware(true);
         DocumentBuilder db = dbf.newDocumentBuilder();
         Document doc = db.parse(args[0]);
         System.out.printf("Version = %s%n", doc.getXmlVersion());
         System.out.printf("Encoding = %s%n", doc.getXmlEncoding());
         System.out.printf("Standalone = %b%n%n", doc.getXmlStandalone());
         if (doc.hasChildNodes()) {
            NodeList nl = doc.getChildNodes();
            for (int i = 0; i < nl.getLength(); i++) {
               Node node = nl.item(i);
               if (node.getNodeType() == Node.ELEMENT_NODE)
                  dump((Element) node);
            }
         }
     } catch (Exception e) {
         e.printStackTrace(System.err);
     }
  }

  private static void dump(Element e) {
     System.out.printf("Element: %s, %s, %s, %s%n", e.getNodeName(),
                        e.getLocalName(), e.getPrefix(), e.getNamespaceURI());
     NamedNodeMap nnm = e.getAttributes();
     if (nnm != null)
         for (int i = 0; i < nnm.getLength(); i++) {
            Node node = nnm.item(i);
            Attr attr = e.getAttributeNode(node.getNodeName());
              System.out.printf(" Attribute %s = %s%n", attr.getName(),
                              attr.getValue());
         }
     NodeList nl = e.getChildNodes();
     for (int i = 0; i < nl.getLength(); i++) {
         Node node = nl.item(i);
         if (node instanceof Element)
           dump((Element) node);
     }
  }
}
