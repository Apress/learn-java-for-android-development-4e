public class PC {
   public static void main(String[] args) {
     Shared s = new Shared();
      new Producer(s).start();
      new Consumer(s).start();
   }
}

public class Shared {
  private char c = '\u0000';
  private boolean writeable = true;

   public synchronized void setSharedChar(char c) {
     while (!writeable)
        try {
           wait();
        } catch (InterruptedException e) {}
     this.c = c;
     writeable = false;
     notify();
   }

   public synchronized char getSharedChar() {
     while (writeable)
        try {
           wait();
        } catch (InterruptedException e) {}
     writeable = true;
     notify();
     return c;
   }
}

public class Producer extends Thread {
  private Shared s;

   public Producer(Shared s){
     this.s = s;
   }

  @Override
   public void run() {
      for (char ch = 'A'; ch <= 'Z'; ch++) {
         synchronized(s) {
             s.setSharedChar(ch);
             System.out.println(ch + " produced by producer.");
         }
      }
   }
}
public class Consumer extends Thread {
  private Shared s;

   public Consumer(Shared s) {
     this.s = s;
   }

  @Override
   public void run() {
     char ch;
      do {
         synchronized(s) {
           ch = s.getSharedChar();
           System.out.println(ch + " consumed by consumer.");
         }
      } while (ch != 'Z');
   }
}
